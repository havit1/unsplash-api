{"version":3,"sources":["Components/SerachForm/SearchForm.jsx","Components/Navbar/Navbar.jsx","Components/HOC/withInfScroll.jsx","utils/request.js","utils/unsplash.js","Components/Grid/GridItem.jsx","Components/Grid/Grid.jsx","Components/Home/Home.jsx","Components/Search/Search.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SearchForm","props","onChange","e","searchValue","currentTarget","value","setState","state","isFocus","submitForm","bind","preventDefault","this","history","push","className","onSubmit","type","placeholder","Component","SearchFormWithRouter","withRouter","Navbar","onSearch","exact","to","withInfScroll","WrappedComponent","getData","populate","console","log","document","documentElement","getBoundingClientRect","bottom","clientHeight","fething","nextImages","hasMore","newState","Object","assign","currentPage","match","params","queryString","images","prevProps","prevState","setImages","window","addEventListener","removeEventListener","React","axios","interceptors","response","use","error","status","Promise","reject","Request","url","headers","get","unsplash","page","Authorization","process","qString","toLowerCase","GridItem","prevSpans","spans","imageRef","createRef","setSpans","current","image","style","gridRowEnd","src","urls","regular","alt","ref","ImageHeight","Math","floor","PureComponent","Grid","map","key","id","that","a","photos","data","length","concat","homeWithScroll","searchWithScroll","results","App","searchHandler","path","component","Home","Search","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kYAIMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAiBRC,SAAW,SAAAC,GACT,IAAMC,EAAcD,EAAEE,cAAcC,MACpC,EAAKC,SAAS,CAAEH,iBAlBhB,EAAKI,MAAQ,CACXC,SAAS,EACTL,YAAa,IAGf,EAAKM,WAAa,EAAKA,WAAWC,KAAhB,gBAPD,E,wEAURR,GACTA,EAAES,iBACGC,KAAKL,MAAMJ,aAGhBS,KAAKZ,MAAMa,QAAQC,KAAnB,kBAAmCF,KAAKL,MAAMJ,gB,+BAS9C,OACE,0BAAMY,UAAW,cAAeC,SAAUJ,KAAKH,YAC7C,4BAAQM,UAAU,uBAAlB,KACA,2BACEd,SAAUW,KAAKX,SACfI,MAAOO,KAAKL,MAAMJ,YAClBc,KAAK,OACLC,YAAY,YACZH,UAAU,4B,GAjCKI,aAwCnBC,EAAuBC,YAAWtB,G,QCvC3BuB,EAAb,2MACEf,MAAQ,GADV,wEAEY,IACAgB,EAAaX,KAAKZ,MAAlBuB,SAER,OACE,yBAAKR,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CAAYQ,SAAUA,KAExB,wBAAIR,UAAU,cACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAASS,OAAK,EAACC,GAAG,KAAlB,SAIF,wBAAIV,UAAU,mBACZ,kBAAC,IAAD,CAASU,GAAG,UAAZ,iBAlBd,GAA4BN,a,yBCHrB,SAASO,EAAcC,EAAkBC,GAC9C,mBACE,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KA0CR6B,SAAW,WACTC,QAAQC,IAAI,aACeC,SAASC,gBAAgBC,wBACjDC,OACwBH,SAASC,gBAAgBG,aAAe,IACjE,EAAK9B,SAAS,CAAE+B,SAAS,IACzB,EAAKC,eAjDU,EAqDnBA,WAAa,WACN,EAAK/B,MAAMgC,UAChBT,QAAQC,IAAI,uBAEZ,EAAKzB,UACH,SAAAC,GACE,IAAMiC,EAAWC,OAAOC,OAAOnC,GAE/B,OADAiC,EAASG,cACFH,KAET,WACE,EAAKZ,QACH,EAAKrB,MAAMoC,YADb,eAGE,EAAK3C,MAAM4C,MAAMC,OAAOC,kBAjE9B,EAAKlB,QAAUA,EACf,EAAKC,SAAW,EAAKA,SAASnB,KAAd,gBAChB,EAAKH,MAAQ,CACXwC,OAAQ,GACRJ,YAAa,EACbJ,SAAS,GAPM,EADrB,gFAYqBS,EAAWC,GAE1BD,EAAUJ,MAAMC,OAAOC,cACvBlC,KAAKZ,MAAM4C,MAAMC,OAAOC,cAExBlC,KAAKsC,UAAU,IACfpB,QAAQC,IAAI,mBACZnB,KAAKgB,QACHhB,KAAKL,MAAMoC,YACX/B,KACAA,KAAKZ,MAAM4C,MAAMC,OAAOC,gBAtBhC,gCA2BYC,GACRnC,KAAKN,SAAS,CAAEyC,aA5BpB,0CAgCInC,KAAKgB,QACHhB,KAAKL,MAAMoC,YACX/B,KACAA,KAAKZ,MAAM4C,MAAMC,OAAOC,aAE1BK,OAAOC,iBAAiB,SAAUxC,KAAKiB,YArC3C,6CAyCIsB,OAAOE,oBAAoB,SAAUzC,KAAKiB,YAzC9C,+BA2EI,OAAO,kBAACF,EAAD,iBAAsBf,KAAKZ,MAA3B,CAAkC+C,OAAQnC,KAAKL,MAAMwC,cA3EhE,GAAqBO,IAAMnC,W,qBCD7BoC,IAAMC,aAAaC,SAASC,IAAI,MAAM,SAAAC,GASpC,OAPEA,EAAMF,UACNE,EAAMF,SAASG,QAAU,KACzBD,EAAMF,SAASG,OAAS,KAGxB9B,QAAQC,IAAI,oBAAqB4B,GAE5BE,QAAQC,OAAOH,M,IAQTI,E,4FAJTC,GAAoB,IAAfC,EAAc,uDAAJ,GACjB,OAAOV,IAAMW,IAAIF,EAAK,CAAEC,gB,KCdfE,EACQ,SAAAC,GAEjB,OADgB,IAAIL,GACLG,IAAR,+CAAoDE,GAAQ,CACjEC,cAAc,aAAD,OAAeC,uEAJrBH,EAOO,SAACI,EAASH,GAG1B,OAFgB,IAAIL,GAELG,IAAR,sDAC0CE,EAD1C,kBACwDG,EAAQC,eACrE,CACEH,cAAc,aAAD,OAAeC,uECiCrBG,G,wBA5Cb,aAAe,IAAD,8BACZ,+CACKlE,MAAQ,CACXmE,UAAW,EACXC,MAAO,GAGT,EAAKC,SAAWtB,IAAMuB,YACtB,EAAKC,SAAW,EAAKA,SAASpE,KAAd,gBARJ,E,iFAYZE,KAAKgE,SAASG,QAAQ3B,iBAAiB,OAAQxC,KAAKkE,Y,6CAIpDlE,KAAKgE,SAASG,QAAQ1B,oBAAoB,OAAQzC,KAAKkE,Y,+BAG/C,IACAE,EAAUpE,KAAKZ,MAAfgF,MACAL,EAAU/D,KAAKL,MAAfoE,MACR,OACE,yBACE5D,UAAU,YACVkE,MAAO,CACLC,WAAW,QAAD,OAAUP,KAGtB,yBAAKQ,IAAKH,EAAMI,KAAKC,QAASC,IAAI,GAAGC,IAAK3E,KAAKgE,c,iCAMnD,IAAMY,EAAc5E,KAAKgE,SAASG,QAAQ3C,aAEpCuC,EAAQc,KAAKC,MAAMF,EADP,IAElB1D,QAAQC,IAAI4C,GAEZ/D,KAAKN,SAAS,CAAEqE,c,GAzCGrB,IAAMqC,gBCWdC,EAVF,SAAC,GAAqB,IAAD,IAAlB7C,cAAkB,MAAT,GAAS,EAChC,OACE,yBAAKhC,UAAU,QACZgC,EAAO8C,KAAI,SAAAb,GAAK,OACf,kBAAC,EAAD,CAAUc,IAAKd,EAAMe,GAAIf,MAAOA,S,4CCQxC,WAA2BrC,EAAaqD,GAAxC,iBAAAC,EAAA,sEACuB9B,EAA2BxB,GADlD,WACQuD,EADR,QAEcC,KAAKC,OAFnB,yCAEkCJ,EAAK1F,SAAS,CAAEiC,SAAS,KAF3D,OAGQQ,EAASiD,EAAKzF,MAAMwC,OAAOsD,OAAOH,EAAOC,MAC/CH,EAAK9C,UAAUH,GAJjB,4C,sBAOA,IAEeuD,EAFQ5E,E,iLAfnB,OACE,6BACE,kBAAC,EAAD,CAAMqB,OAAQnC,KAAKZ,MAAM+C,c,GAJd5B,c,gDCwBJoF,EAFU7E,E,iLApBrB,OACE,oCACE,kBAAC,EAAD,CAAMqB,OAAQnC,KAAKZ,MAAM+C,c,GAJZ5B,aAUJ,uCAAG,WAAOwB,EAAaqD,EAAMlD,GAA1B,iBAAAmD,EAAA,+EAEK9B,EAA0BrB,EAAaH,GAF5C,WAEVuD,EAFU,QAGJC,KAAKK,QAAQJ,OAHT,yCAGwBJ,EAAK1F,SAAS,CAAEiC,SAAS,KAHjD,OAIVQ,EAASiD,EAAKzF,MAAMwC,OAAOsD,OAAOH,EAAOC,KAAKK,SAEpDR,EAAK9C,UAAUH,GANC,kDAQhBjB,QAAQ6B,MAAR,MARgB,0DAAH,2DCeF8C,E,iLAjBX,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQlF,SAAUX,KAAK8F,gBACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOlF,OAAO,EAAMmF,KAAK,IAAIC,UAAWC,IACxC,kBAAC,IAAD,CAAOF,KAAK,uBAAuBC,UAAWE,IAC9C,kBAAC,IAAD,CAAOH,KAAK,SAASC,UAAW,kBAAM,6CACtC,kBAAC,IAAD,CAAOD,KAAK,OAAOC,UAAW,kBAAM,4CACpC,kBAAC,IAAD,CAAUnF,GAAG,gB,GAXPN,aCAE4F,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASrE,MACvB,2DCZNsE,IAASC,OAAO,kBAAC,EAAD,MAASnF,SAASoF,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8936cccf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./SearchForm.scss\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass SearchForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isFocus: false,\r\n      searchValue: \"\"\r\n    };\r\n\r\n    this.submitForm = this.submitForm.bind(this);\r\n  }\r\n\r\n  submitForm(e) {\r\n    e.preventDefault();\r\n    if (!this.state.searchValue) {\r\n      return;\r\n    }\r\n    this.props.history.push(`/search/${this.state.searchValue}`);\r\n  }\r\n\r\n  onChange = e => {\r\n    const searchValue = e.currentTarget.value;\r\n    this.setState({ searchValue });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={\"search-form\"} onSubmit={this.submitForm}>\r\n        <button className=\"search-form__button\">S</button>\r\n        <input\r\n          onChange={this.onChange}\r\n          value={this.state.searchValue}\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          className=\"search-form__input\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst SearchFormWithRouter = withRouter(SearchForm);\r\nexport { SearchFormWithRouter as SearchForm };\r\n","import React, { Component } from \"react\";\r\nimport \"./Navbar.scss\";\r\nimport { SearchForm } from \"../SerachForm\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport class Navbar extends Component {\r\n  state = {};\r\n  render() {\r\n    const { onSearch } = this.props;\r\n\r\n    return (\r\n      <nav className=\"nav\">\r\n        <div className=\"nav__content\">\r\n          <div className=\"nav__search-form\">\r\n            <SearchForm onSearch={onSearch} />\r\n          </div>\r\n          <ul className=\"nav__links\">\r\n            <li className=\"nav__links-link\">\r\n              <NavLink exact to=\"/\">\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav__links-link\">\r\n              <NavLink to=\"/about\">About</NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport function withInfScroll(WrappedComponent, getData) {\r\n  return class extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.getData = getData;\r\n      this.populate = this.populate.bind(this);\r\n      this.state = {\r\n        images: [],\r\n        currentPage: 1,\r\n        hasMore: true\r\n      };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n      if (\r\n        prevProps.match.params.queryString !==\r\n        this.props.match.params.queryString\r\n      ) {\r\n        this.setImages([]);\r\n        console.log(\"Fetching images\");\r\n        this.getData(\r\n          this.state.currentPage,\r\n          this,\r\n          this.props.match.params.queryString\r\n        );\r\n      }\r\n    }\r\n\r\n    setImages(images) {\r\n      this.setState({ images });\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.getData(\r\n        this.state.currentPage,\r\n        this,\r\n        this.props.match.params.queryString\r\n      );\r\n      window.addEventListener(\"scroll\", this.populate);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      window.removeEventListener(\"scroll\", this.populate);\r\n    }\r\n\r\n    populate = () => {\r\n      console.log(\"Scrolling\");\r\n      let windowRelativeBottom = document.documentElement.getBoundingClientRect()\r\n        .bottom;\r\n      if (windowRelativeBottom < document.documentElement.clientHeight + 1) {\r\n        this.setState({ fething: true });\r\n        this.nextImages();\r\n      }\r\n    };\r\n\r\n    nextImages = () => {\r\n      if (!this.state.hasMore) return;\r\n      console.log(\"New images incoming\");\r\n\r\n      this.setState(\r\n        state => {\r\n          const newState = Object.assign(state);\r\n          newState.currentPage++;\r\n          return newState;\r\n        },\r\n        () => {\r\n          this.getData(\r\n            this.state.currentPage,\r\n            this,\r\n            this.props.match.params.queryString\r\n          );\r\n        }\r\n      );\r\n    };\r\n\r\n    render() {\r\n      return <WrappedComponent {...this.props} images={this.state.images} />;\r\n    }\r\n  };\r\n}\r\n","import axios from \"axios\";\r\n\r\naxios.interceptors.response.use(null, error => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500;\r\n\r\n  if (!expectedError) {\r\n    console.log(\"Logging the error\", error);\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\nclass Request {\r\n  get(url, headers = {}) {\r\n    return axios.get(url, { headers });\r\n  }\r\n}\r\nexport default Request;\r\n","import Request from \"./request\";\r\n\r\nexport const unsplash = {\r\n  getMainPagePhotos: page => {\r\n    const request = new Request();\r\n    return request.get(`https://api.unsplash.com/photos?page=${page}`, {\r\n      Authorization: `Client-ID ${process.env.REACT_APP_UNSPLASH_API_KEY}`\r\n    });\r\n  },\r\n  getPhotosByQuery: (qString, page) => {\r\n    const request = new Request();\r\n\r\n    return request.get(\r\n      `https://api.unsplash.com/search/photos?page=${page}&query=${qString.toLowerCase()}`,\r\n      {\r\n        Authorization: `Client-ID ${process.env.REACT_APP_UNSPLASH_API_KEY}`\r\n      }\r\n    );\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport \"./GridItem.scss\";\r\n\r\nclass GridItem extends React.PureComponent {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      prevSpans: 0,\r\n      spans: 0\r\n    };\r\n\r\n    this.imageRef = React.createRef();\r\n    this.setSpans = this.setSpans.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.imageRef.current.addEventListener(\"load\", this.setSpans);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.imageRef.current.removeEventListener(\"load\", this.setSpans);\r\n  }\r\n\r\n  render() {\r\n    const { image } = this.props;\r\n    const { spans } = this.state;\r\n    return (\r\n      <div\r\n        className=\"grid-item\"\r\n        style={{\r\n          gridRowEnd: `span ${spans}`\r\n        }}\r\n      >\r\n        <img src={image.urls.regular} alt=\"\" ref={this.imageRef} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setSpans() {\r\n    const ImageHeight = this.imageRef.current.clientHeight;\r\n    const rawHeight = 50;\r\n    const spans = Math.floor(ImageHeight / rawHeight);\r\n    console.log(spans);\r\n\r\n    this.setState({ spans });\r\n  }\r\n}\r\n\r\nexport default GridItem;\r\n","import \"./Grid.scss\";\r\nimport GridItem from \"./GridItem\";\r\nimport React from \"react\";\r\n\r\nconst Grid = ({ images = [] }) => {\r\n  return (\r\n    <div className=\"grid\">\r\n      {images.map(image => (\r\n        <GridItem key={image.id} image={image} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport { withInfScroll } from \"../HOC/withInfScroll\";\r\nimport { unsplash } from \"../../utils/unsplash\";\r\n\r\nimport Grid from \"../Grid/Grid\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid images={this.props.images} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nasync function fetchImages(currentPage, that) {\r\n  const photos = await unsplash.getMainPagePhotos(currentPage);\r\n  if (!photos.data.length) return that.setState({ hasMore: false });\r\n  const images = that.state.images.concat(photos.data);\r\n  that.setImages(images);\r\n}\r\n\r\nconst homeWithScroll = withInfScroll(Home, fetchImages);\r\n\r\nexport default homeWithScroll;\r\n","import React, { Component } from \"react\";\r\nimport { unsplash } from \"../../utils/unsplash\";\r\nimport { withInfScroll } from \"../HOC/withInfScroll\";\r\n\r\nimport Grid from \"../Grid/Grid\";\r\n\r\nclass Search extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Grid images={this.props.images} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst fetchImages = async (currentPage, that, queryString) => {\r\n  try {\r\n    const photos = await unsplash.getPhotosByQuery(queryString, currentPage);\r\n    if (!photos.data.results.length) return that.setState({ hasMore: false });\r\n    const images = that.state.images.concat(photos.data.results);\r\n\r\n    that.setImages(images);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nconst searchWithScroll = withInfScroll(Search, fetchImages);\r\n\r\nexport default searchWithScroll;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Navbar } from \"./Components/Navbar\";\nimport Home from \"./Components/Home/Home\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport Search from \"./Components/Search/Search\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <Navbar onSearch={this.searchHandler}></Navbar>\n          <Switch>\n            <Route exact={true} path=\"/\" component={Home} />\n            <Route path=\"/search/:queryString\" component={Search} />\n            <Route path=\"/about\" component={() => <h2>About page</h2>} />\n            <Route path=\"/404\" component={() => <h1>Not found</h1>} />\n            <Redirect to=\"/404\" />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}